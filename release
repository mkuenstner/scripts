#!/bin/zsh
autoload colors ; colors

usage() {
  cat << EOF
Usage: $0 -h <head ref> -b <base ref>

OPTIONS:
   -h <head ref>  head reference, merge source
   -b <base ref>  base reference, merge target
   -c             update and commit composer.lock file
   -p             push merged and updated changes
EOF
}

merge_branches() {

    local base head unstaged
    head=$1
    base=$2

    echo -n "[....] merge\r"
    git fetch origin
    rev_count=(`git rev-list origin/$base..origin/$head --count`)

    if [[ $? != 0 ]]; then
        echo "$fg[red]something went wrong$reset_color"
        exit 1
    fi

    # update local references
    git checkout $head && git rebase
    git checkout $base && git rebase

    if [[ $rev_count != 0 ]]; then
        git merge --no-ff --no-commit $head
        unstaged=(`git ls-files -u | wc -l | tr -d ' '`)

        if [[ $unstaged != 0 ]]; then
            echo "[$fg[red]fail$reset_color] merge conflict"
            exit 1
        fi

        git commit -am "chore(merge): branch '$head'"
        echo "[ $fg[green]ok$reset_color ] merge"
    else
        echo "[ $fg[green]ok$reset_color ] merge (clean)"
    fi
}

composer_update() {
    echo -n "[....] composer.lock\r"

    # remove current version (faster?)
    rm -rf composer.lock vendor

    # update everything
    composer update --no-progress --quiet --no-interaction

    if git diff-index --quiet HEAD --; then
        git ci -am'chore(composer): update composer.lock'
        echo "[ $fg[green]ok$reset_color ] composer.lock"
    else
        echo "[ $fg[green]ok$reset_color ] composer.lock (up-to-date)"
    fi
}

push=0
composer=0
head="develop"
base="master"

while getopts "h:b:cp" OPTION; do
  case $OPTION in
    h) head=$OPTARG;;
    b) base=$OPTARG;;
    c) composer=1;;
    p) push=1;;
    [?]) usage; exit 1;;
  esac
done

if [[ ! -z $head ]] && [[ ! -z $base ]]; then
    merge_branches $head $base
    if [[ $? = 1 ]]; then
        exit 1
    fi
fi

if [[ $composer = 1 ]]; then
    composer_update
fi

need_push=(`git rev-list origin/$base..$base --count`)
if [[ $push ]] && [[ $need_push ]]; then
    git push origin $base
fi
